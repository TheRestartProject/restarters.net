# https://taskfile.dev

version: "3"

# Load environment-specific .env file
dotenv:
  - .env

vars:
  DOCKER_CMD:
    sh: command -v docker-compose &> /dev/null && echo "docker-compose" || echo "docker compose"
  COMPOSE_PROFILES:
    map:
      all: "'*'"
      core: "core"
      debug: "debug"
      discourse: "discourse"

tasks:
  # Default task
  default:
    desc: List all tasks
    cmds:
      - task --list

  # Docker container management tasks
  docker:up-*:
    desc: Start Docker containers for a given profile (Usage - task docker:up-[core|debug|discourse|all])
    summary: |
      Start a set of Docker containers at a given time. The core services are always started with any profile.
      For just the core services, use:
      task docker:up-core

      To include phpMyAdmin and Mailhog, use:
      task docker:up-debug

      To include the Discourse set of containers, use:
      task docker:up-discourse

      If you want to start all containers, use:
      task docker:up-all

    requires: &PROFILE_REQUIRES
      vars:
        - name: PROFILE
          enum: [core, debug, discourse, all]
    
    vars: &PROFILE_VARS
      PROFILE: "{{index .MATCH 0}}"

    cmds:
      - '{{.DOCKER_CMD}} --profile {{ index .COMPOSE_PROFILES .PROFILE }} up -d'

  docker:down-*:
    desc: Stop Docker containers for a given profile (Usage - task docker:down-[core|debug|discourse|all])
    summary: |
      Stop a set of Docker containers at a given time. The core services are always stopped with any profile.
      For just the core services, use:
      task docker:down-core

      To include phpMyAdmin and Mailhog, use:
      task docker:down-debug

      To include the Discourse set of containers, use:
      task docker:down-discourse

      If you want to stop all containers, use:
      task docker:down-all

    requires: *PROFILE_REQUIRES
    
    vars: *PROFILE_VARS

    cmds:
      - '{{.DOCKER_CMD}} --profile {{ index .COMPOSE_PROFILES .PROFILE }} down'

  docker:rebuild-*:
    desc: Rebuild Docker containers for a given profile (Usage - task docker:rebuild-[core|debug|discourse|all])
    summary: |
      Rebuild a set of Docker containers at a given time. The core services are always rebuilt with any profile.
      For just the core services, use:
      task docker:rebuild-core

      To include phpMyAdmin and Mailhog, use:
      task docker:rebuild-debug

      To include the Discourse set of containers, use:
      task docker:rebuild-discourse

      To rebuild all containers, use:
      task docker:rebuild-all

    requires: *PROFILE_REQUIRES
    
    vars: *PROFILE_VARS

    cmds:
      - '{{.DOCKER_CMD}} --profile {{ index .COMPOSE_PROFILES .PROFILE }} down -v --rmi all'
      - '{{.DOCKER_CMD}} --profile {{ index .COMPOSE_PROFILES .PROFILE }} up -d'

  docker:restart-*:
    desc: Restart Docker containers for a given profile (Usage - task docker:restart-[core|debug|discourse|all])
    summary: |
      Restart a set of Docker containers at a given time. The core services are always restarted with any profile.
      For just the core services, use:
      task docker:restart-core

      To include phpMyAdmin and Mailhog, use:
      task docker:restart-debug

      To include the Discourse set of containers, use:
      task docker:restart-discourse

      To restart all containers, use:
      task docker:restart-all

    requires: *PROFILE_REQUIRES
    
    vars: *PROFILE_VARS

    cmds:
      - '{{.DOCKER_CMD}} --profile {{ index .COMPOSE_PROFILES .PROFILE }} restart'


  docker:logs:
    desc: Show the logs for the core application container.
    cmds:
      - cmd: docker logs -f restarters
        ignore_error: true


  docker:shell:
    desc: Open a shell into the core application container.
    cmds:
      - cmd: docker exec -it restarters bash
        ignore_error: true

  docker:run:bash:
    desc: Run a bash command in the core application container.
    summary: |
      Run a bash command in the core application container. To pass the arguments, use the -- flag.
      For example, to run the ls command, use:
      task docker:run:bash -- ls -la

    cmds:
      - docker exec -it restarters bash -c "{{ .CLI_ARGS }}"

  docker:run:artisan:
    desc: Run an artisan command in the core application container.
    summary: |
      Run an artisan command in the core application container. To pass the arguments, use the -- flag.
      For example, to run the migrate command, use:
      task docker:run:artisan -- migrate

    cmds:
      - docker exec -it restarters php artisan "{{ .CLI_ARGS }}"