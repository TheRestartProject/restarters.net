# Core docker-compose file for Restarters development environment
# Core Services:
# - Restarters web server: http://www.example.com:8001 (Admin: jane@bloggs.net/passw0rd)
# - A Database: Exposed on port 3306 internally
#
# TODO The domain name could be better but needs some configuration on the Discourse images which is hard.
# TODO It doesn't yet include the wiki.
# TODO If your host is Linux, this probably only works if you run as root.
#
# On the machine where you will be using your browser to access the Restarters / Discourse sites once set up on Docker,
# add a record to your hosts file to point the domain www.example.com to the machine.
#
# Then start using:
# - docker-compose up -d
#
# The Restarters web server won't be available for some time after that finishes - it will be doing a composer
# install, artisan migrate etc. Discourse also takes quite a few minutes to finish initialising.  You can monitor
# progress using:
#
# docker logs --follow restarters
#
# (or via Docker Desktop's UI on Windows).   Check for any obvious errors.
#
# Then:
# - edit .env and set GOOGLE_API_CONSOLE_KEY to the dev key.
# TODO This isn't checked in to the codebase, but once this works on Circle then we can put it in an env variable and edit it in via docker_run.sh.
# - log in to the restarters container using: docker exec -it restarters bash
# - run UT using: export DB_TEST_HOST=restarters_db; php vendor/phpunit/phpunit/phpunit --configuration ./phpunit.xml
# TODO This isn't a very convenient way to do run tests.  Would be good to enable SSH on the Restarter container so
# that JetBrains and other IDEs can trigger the running of tests.
#
# If you want to remove everything to free up disk space or force a complete rebuild (e.g. as a sanity check
# after changing this configuration):
# - docker-compose down -v --rmi all --remove-orphans
# ------------------------------------------------------------
# Debug services extension for docker-compose
# Additional Services:
# - phpMyAdmin: http://www.example.com:8002 (Use host: restarters_db, user: root/s3cr3t)
# - Mailhog: http://localhost:8025 (SMTP server on port 1025)
#
# Debug Tools:
# - phpMyAdmin: Database management interface
#   - Access at http://www.example.com:8002
#   - Use host: restarters_db, username: root, password: s3cr3t
#
# - Mailhog: Email testing tool
#   - Web interface: http://localhost:8025
#   - SMTP server: localhost:1025
#   - All emails from the application will be caught here
# ------------------------------------------------------------
# Discourse services extension for docker-compose
# Additional Services:
# - Discourse: http://www.example.com:8003 (User: someuser/mustbetencharacters)
# - PostgreSQL: Internal database for Discourse
# - Redis: Cache server for Discourse
# - Sidekiq: Background job processor for Discourse
#
# Initial Discourse Setup:
# 1. Log in to http://www.example.com:8003 using someuser/mustbetencharacters
# 2. Create API key at /admin/api/keys/new for all users with all scope
# 3. Add key to .env as DISCOURSE_APIKEY
# 4. Go to http://www.example.com:8003/admin/site_settings/category/login?filter=
# 5. Set discourse connect url to http://www.example.com:8001/discourse/sso
# 6. Enable discourse connect and discourse connect provider
# 7. Set discourse connect secret to match DISCOURSE_SECRET in .env
# This is automated in a different way in CircleCI - see config.yml.
#
# Database Access:
# To connect to Discourse's PostgreSQL database from the restarters container:
# psql -h postgresql -U bn_discourse -p 5432 -w bitnami_discourse
#
# TODO This is stock Discourse - no theme.  Would be nice to have the theme, but that doesn't matter so far as
# testing the integration.

version: '3'

services:
  # Core services - always enabled
  restarters:
    profiles: ["core", "debug", "discourse"]
    depends_on:
      - restarters_db
    build:
      context: .
      dockerfile: Dockerfile
    user: root
    container_name: restarters
    restart: unless-stopped
    tty: true
    ports:
      - "8001:80"
    environment:
      SERVICE_NAME: restarters
      SERVICE_TAGS: dev
    working_dir: /var/www
    volumes:
      # We share the current folder into /var/www.  This means code changes on the host will get picked up
      # by the client.
      - ./:/var/www:rw
      - ./php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - app-network

  restarters_db:
    profiles: ["core", "debug", "discourse"]
    image: mysql:5.7.33
    container_name: restarters_db
    restart: unless-stopped
    tty: true
    expose:
      - "3306"
    environment:
      MYSQL_DATABASE: restarters_db_test
      MYSQL_ROOT_PASSWORD: s3cr3t
      MYSQL_USER: restarters
      MYSQL_PASSWORD: s3cr3t
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - dbdata:/var/lib/mysql
      - ./mysql/my.cnf:/etc/mysql/my.cnf
    networks:
      - app-network

  # Debug services
  phpmyadmin:
    profiles: ["debug"]
    depends_on:
      - restarters_db
    image: phpmyadmin
    container_name: restarters_phpmyadmin
    restart: unless-stopped
    ports:
      - 8002:80
    environment:
      - PMA_ARBITRARY=1
      - PMA_HOST=restarters_db
    networks:
      - app-network
      
  mailhog:
    profiles: ["debug"]
    image: mailhog/mailhog
    container_name: restarters_mailhog
    logging:
      driver: 'none'  # disable saving logs
    ports:
      - 1025:1025 # smtp server
      - 8025:8025 # web ui
    networks:
      - app-network

  # From here, it's stuff that Discourse needs.
  #
  # The other Docker images hardcode the name of the postgresql server in some places, so we can't prefix that.
  #
  # If you want to connect to the database that Discourse uses, you can do this from the restarters container using:
  # psql -h postgresql -U bn_discourse -p 5432 -w bitnami_discourse
  postgresql:
    profiles: ["discourse"]
    image: docker.io/bitnami/postgresql:11
    container_name: postgresql
    volumes:
      - 'postgresql_data:/bitnami/postgresql'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - POSTGRESQL_USERNAME=bn_discourse
      - POSTGRESQL_DATABASE=bitnami_discourse
    networks:
      - app-network

  restarters_discourse_redis:
    profiles: ["discourse"]
    image: docker.io/bitnami/redis:6.0
    container_name: restarters_discourse_redis
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    volumes:
      - 'redis_data:/bitnami/discourse'
    networks:
      - app-network

  restarters_discourse:
    profiles: ["discourse"]
    image: docker.io/bitnami/discourse:2
    container_name: restarters_discourse
    ports:
      - '8003:80'
    volumes:
      - 'discourse_data:/bitnami/discourse'
    depends_on:
      - postgresql
      - restarters_discourse_redis
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - DISCOURSE_USERNAME=someuser
      - DISCOURSE_PASSWORD=mustbetencharacters
      - DISCOURSE_HOST=www.example.com:8003 # You should have set this in hosts.
      - DISCOURSE_PORT_NUMBER=80
      - DISCOURSE_DATABASE_HOST=postgresql
      - DISCOURSE_DATABASE_PORT_NUMBER=5432
      - DISCOURSE_DATABASE_USER=bn_discourse
      - DISCOURSE_DATABASE_NAME=bitnami_discourse
      - DISCOURSE_REDIS_HOST=restarters_discourse_redis
      - DISCOURSE_REDIS_PORT_NUMBER=6379
      - POSTGRESQL_CLIENT_POSTGRES_USER=postgres
      - POSTGRESQL_CLIENT_CREATE_DATABASE_NAME=bitnami_discourse
      - POSTGRESQL_CLIENT_CREATE_DATABASE_EXTENSIONS=hstore,pg_trgm
    networks:
      - app-network

  sidekiq:
    profiles: ["discourse"]
    image: docker.io/bitnami/discourse:2
    container_name: restarters_discourse_sidekiq
    depends_on:
      - restarters_discourse
    volumes:
      - 'sidekiq_data:/bitnami/discourse'
    command: /opt/bitnami/scripts/discourse-sidekiq/run.sh
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - DISCOURSE_HOST=www.example.com
      - DISCOURSE_DATABASE_HOST=postgresql
      - DISCOURSE_DATABASE_PORT_NUMBER=5432
      - DISCOURSE_DATABASE_USER=bn_discourse
      - DISCOURSE_DATABASE_NAME=bitnami_discourse
      - DISCOURSE_REDIS_HOST=restarters_discourse_redis
      - DISCOURSE_REDIS_PORT_NUMBER=6379
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  dbdata:
    driver: local
  postgresql_data:
    driver: local
  redis_data:
    driver: local
  discourse_data:
    driver: local
  sidekiq_data:
    driver: local