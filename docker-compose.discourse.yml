# Discourse services extension for docker-compose
# Additional Services:
# - Discourse: http://www.example.com:8003 (User: someuser/mustbetencharacters)
# - PostgreSQL: Internal database for Discourse
# - Redis: Cache server for Discourse
# - Sidekiq: Background job processor for Discourse
#
# Initial Discourse Setup:
# 1. Log in to http://www.example.com:8003 using someuser/mustbetencharacters
# 2. Create API key at /admin/api/keys/new for all users with all scope
# 3. Add key to .env as DISCOURSE_APIKEY
# 4. Go to http://www.example.com:8003/admin/site_settings/category/login?filter=
# 5. Set discourse connect url to http://www.example.com:8001/discourse/sso
# 6. Enable discourse connect and discourse connect provider
# 7. Set discourse connect secret to match DISCOURSE_SECRET in .env
# This is automated in a different way in CircleCI - see config.yml.
#
# Database Access:
# To connect to Discourse's PostgreSQL database from the restarters container:
# psql -h postgresql -U bn_discourse -p 5432 -w bitnami_discourse
#
# TODO This is stock Discourse - no theme.  Would be nice to have the theme, but that doesn't matter so far as
# testing the integration.
#

version: '3'
services:

  restarters:
    environment:
      DISCOURSE_URL: http://restarters_discourse:80
      DISCOURSE_SECRET: mustbetencharacters

  # From here, it's stuff that Discourse needs.
  #
  # The other Docker images hardcode the name of the postgresql server in some places, so we can't prefix that.
  #
  # If you want to connect to the database that Discourse uses, you can do this from the restarters container using:
  # psql -h postgresql -U bn_discourse -p 5432 -w bitnami_discourse
  postgresql:
    image: docker.io/bitnami/postgresql:11
    container_name: postgresql
    volumes:
      - 'postgresql_data:/bitnami/postgresql'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - POSTGRESQL_USERNAME=bn_discourse
      - POSTGRESQL_DATABASE=bitnami_discourse
    networks:
      - app-network

  restarters_discourse_redis:
    image: docker.io/bitnami/redis:6.0
    container_name: restarters_discourse_redis
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    volumes:
      - 'redis_data:/bitnami/discourse'
    networks:
      - app-network

  restarters_discourse:
    image: docker.io/bitnami/discourse:2
    container_name: restarters_discourse
    ports:
      - '8003:80'
    volumes:
      - 'discourse_data:/bitnami/discourse'
    depends_on:
      - postgresql
      - restarters_discourse_redis
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - DISCOURSE_USERNAME=someuser
      - DISCOURSE_PASSWORD=mustbetencharacters
      - DISCOURSE_HOST=www.example.com:8003 # You should have set this in hosts.
      - DISCOURSE_PORT_NUMBER=80
      - DISCOURSE_DATABASE_HOST=postgresql
      - DISCOURSE_DATABASE_PORT_NUMBER=5432
      - DISCOURSE_DATABASE_USER=bn_discourse
      - DISCOURSE_DATABASE_NAME=bitnami_discourse
      - DISCOURSE_REDIS_HOST=restarters_discourse_redis
      - DISCOURSE_REDIS_PORT_NUMBER=6379
      - POSTGRESQL_CLIENT_POSTGRES_USER=postgres
      - POSTGRESQL_CLIENT_CREATE_DATABASE_NAME=bitnami_discourse
      - POSTGRESQL_CLIENT_CREATE_DATABASE_EXTENSIONS=hstore,pg_trgm
    networks:
      - app-network

  sidekiq:
    image: docker.io/bitnami/discourse:2
    container_name: restarters_discourse_sidekiq
    depends_on:
      - restarters_discourse
    volumes:
      - 'sidekiq_data:/bitnami/discourse'
    command: /opt/bitnami/scripts/discourse-sidekiq/run.sh
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - DISCOURSE_HOST=www.example.com
      - DISCOURSE_DATABASE_HOST=postgresql
      - DISCOURSE_DATABASE_PORT_NUMBER=5432
      - DISCOURSE_DATABASE_USER=bn_discourse
      - DISCOURSE_DATABASE_NAME=bitnami_discourse
      - DISCOURSE_REDIS_HOST=restarters_discourse_redis
      - DISCOURSE_REDIS_PORT_NUMBER=6379
    networks:
      - app-network

volumes:
  postgresql_data:
    driver: local
  redis_data:
    driver: local
  discourse_data:
    driver: local
  sidekiq_data:
    driver: local