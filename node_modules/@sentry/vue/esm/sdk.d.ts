import { BrowserOptions } from '@sentry/browser';
import { Transaction } from '@sentry/types';
export interface VueOptions extends BrowserOptions {
    /** Vue instance to be used inside the integration */
    Vue?: VueInstance;
    /**
     * When set to `false`, Sentry will suppress reporting of all props data
     * from your Vue components for privacy concerns.
     */
    attachProps?: boolean;
    /**
     * When set to `true`, original Vue's `logError` will be called as well.
     * https://github.com/vuejs/vue/blob/c2b1cfe9ccd08835f2d99f6ce60f67b4de55187f/src/core/util/error.js#L38-L48
     */
    logErrors?: boolean;
    /**
     * Decides whether to track components by hooking into its lifecycle methods.
     * Can be either set to `boolean` to enable/disable tracking for all of them.
     * Or to an array of specific component names (case-sensitive).
     */
    trackComponents?: boolean | string[];
    /** How long to wait until the tracked root activity is marked as finished and sent of to Sentry */
    timeout?: number;
    /**
     * List of hooks to keep track of during component lifecycle.
     * Available hooks: 'activate' | 'create' | 'destroy' | 'mount' | 'update'
     * Based on https://vuejs.org/v2/api/#Options-Lifecycle-Hooks
     */
    hooks?: Operation[];
    /** {@link TracingOptions} */
    tracingOptions: TracingOptions;
}
/** Global Vue object limited to the methods/attributes we require */
interface VueInstance {
    config: {
        errorHandler?(error: Error, vm?: ViewModel, info?: string): void;
    };
    util?: {
        warn(...input: any): void;
    };
    mixin(hooks: {
        [key: string]: () => void;
    }): void;
}
/** Representation of Vue component internals */
interface ViewModel {
    [key: string]: any;
    $root: object;
    $options: {
        [key: string]: any;
        name?: string;
        propsData?: {
            [key: string]: any;
        };
        _componentTag?: string;
        __file?: string;
        $_sentryPerfHook?: boolean;
    };
    $once(hook: string, cb: () => void): void;
}
declare type Operation = 'activate' | 'create' | 'destroy' | 'mount' | 'update';
/** Vue specific configuration for Tracing Integration  */
interface TracingOptions {
    /**
     * Decides whether to track components by hooking into its lifecycle methods.
     * Can be either set to `boolean` to enable/disable tracking for all of them.
     * Or to an array of specific component names (case-sensitive).
     */
    trackComponents: boolean | string[];
    /** How long to wait until the tracked root activity is marked as finished and sent of to Sentry */
    timeout: number;
    /**
     * List of hooks to keep track of during component lifecycle.
     * Available hooks: 'activate' | 'create' | 'destroy' | 'mount' | 'update'
     * Based on https://vuejs.org/v2/api/#Options-Lifecycle-Hooks
     */
    hooks: Operation[];
}
/**
 * Inits the Vue SDK
 */
export declare function init(options?: Partial<Omit<VueOptions, 'tracingOptions'> & {
    tracingOptions: Partial<TracingOptions>;
}>): void;
/** Grabs active transaction off scope, if any */
export declare function getActiveTransaction(): Transaction | undefined;
export {};
//# sourceMappingURL=sdk.d.ts.map