{"version":3,"file":"tracing.js","sourceRoot":"","sources":["../../src/tracing.ts"],"names":[],"mappings":"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","sourcesContent":["import { getCurrentHub } from '@sentry/browser';\nimport { Span, Transaction } from '@sentry/types';\nimport { logger, timestampInSeconds } from '@sentry/utils';\n\nimport { formatComponentName } from './components';\nimport { DEFAULT_HOOKS } from './constants';\nimport { IS_DEBUG_BUILD } from './flags';\nimport { Hook, Operation, TracingOptions, ViewModel, Vue } from './types';\n\nconst VUE_OP = 'ui.vue';\n\ntype Mixins = Parameters<Vue['mixin']>[0];\n\ninterface VueSentry extends ViewModel {\n  readonly $root: VueSentry;\n  $_sentrySpans?: {\n    [key: string]: Span;\n  };\n  $_sentryRootSpan?: Span;\n  $_sentryRootSpanTimer?: ReturnType<typeof setTimeout>;\n}\n\n// Mappings from operation to corresponding lifecycle hook.\nconst HOOKS: { [key in Operation]: Hook[] } = {\n  activate: ['activated', 'deactivated'],\n  create: ['beforeCreate', 'created'],\n  destroy: ['beforeDestroy', 'destroyed'],\n  mount: ['beforeMount', 'mounted'],\n  update: ['beforeUpdate', 'updated'],\n};\n\n/** Grabs active transaction off scope, if any */\nfunction getActiveTransaction(): Transaction | undefined {\n  return getCurrentHub().getScope()?.getTransaction();\n}\n\n/** Finish top-level span and activity with a debounce configured using `timeout` option */\nfunction finishRootSpan(vm: VueSentry, timestamp: number, timeout: number): void {\n  if (vm.$_sentryRootSpanTimer) {\n    clearTimeout(vm.$_sentryRootSpanTimer);\n  }\n\n  vm.$_sentryRootSpanTimer = setTimeout(() => {\n    if (vm.$root?.$_sentryRootSpan) {\n      vm.$root.$_sentryRootSpan.finish(timestamp);\n      vm.$root.$_sentryRootSpan = undefined;\n    }\n  }, timeout);\n}\n\nexport const createTracingMixins = (options: TracingOptions): Mixins => {\n  const hooks = (options.hooks || [])\n    .concat(DEFAULT_HOOKS)\n    // Removing potential duplicates\n    .filter((value, index, self) => self.indexOf(value) === index);\n\n  const mixins: Mixins = {};\n\n  for (const operation of hooks) {\n    // Retrieve corresponding hooks from Vue lifecycle.\n    // eg. mount => ['beforeMount', 'mounted']\n    const internalHooks = HOOKS[operation];\n    if (!internalHooks) {\n      IS_DEBUG_BUILD && logger.warn(`Unknown hook: ${operation}`);\n      continue;\n    }\n\n    for (const internalHook of internalHooks) {\n      mixins[internalHook] = function (this: VueSentry) {\n        const isRoot = this.$root === this;\n\n        if (isRoot) {\n          const activeTransaction = getActiveTransaction();\n          if (activeTransaction) {\n            this.$_sentryRootSpan =\n              this.$_sentryRootSpan ||\n              activeTransaction.startChild({\n                description: 'Application Render',\n                op: VUE_OP,\n              });\n          }\n        }\n\n        // Skip components that we don't want to track to minimize the noise and give a more granular control to the user\n        const name = formatComponentName(this, false);\n        const shouldTrack = Array.isArray(options.trackComponents)\n          ? options.trackComponents.includes(name)\n          : options.trackComponents;\n\n        // We always want to track root component\n        if (!isRoot && !shouldTrack) {\n          return;\n        }\n\n        this.$_sentrySpans = this.$_sentrySpans || {};\n\n        // Start a new span if current hook is a 'before' hook.\n        // Otherwise, retrieve the current span and finish it.\n        if (internalHook == internalHooks[0]) {\n          const activeTransaction = this.$root?.$_sentryRootSpan || getActiveTransaction();\n          if (activeTransaction) {\n            this.$_sentrySpans[operation] = activeTransaction.startChild({\n              description: `Vue <${name}>`,\n              op: `${VUE_OP}.${operation}`,\n            });\n          }\n        } else {\n          // The span should already be added via the first handler call (in the 'before' hook)\n          const span = this.$_sentrySpans[operation];\n          // The before hook did not start the tracking span, so the span was not added.\n          // This is probably because it happened before there is an active transaction\n          if (!span) return;\n\n          span.finish();\n          finishRootSpan(this, timestampInSeconds(), options.timeout);\n        }\n      };\n    }\n  }\n\n  return mixins;\n};\n"]}