Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var browser_1 = require("@sentry/browser");
var utils_1 = require("@sentry/utils");
var constants_1 = require("./constants");
var errorhandler_1 = require("./errorhandler");
var flags_1 = require("./flags");
var tracing_1 = require("./tracing");
var DEFAULT_CONFIG = {
    Vue: utils_1.getGlobalObject().Vue,
    attachProps: true,
    logErrors: false,
    hooks: constants_1.DEFAULT_HOOKS,
    timeout: 2000,
    trackComponents: false,
    _metadata: {
        sdk: {
            name: 'sentry.javascript.vue',
            packages: [
                {
                    name: 'npm:@sentry/vue',
                    version: browser_1.SDK_VERSION,
                },
            ],
            version: browser_1.SDK_VERSION,
        },
    },
};
/**
 * Inits the Vue SDK
 */
function init(config) {
    if (config === void 0) { config = {}; }
    var options = tslib_1.__assign(tslib_1.__assign({}, DEFAULT_CONFIG), config);
    browser_1.init(options);
    if (!options.Vue && !options.app) {
        flags_1.IS_DEBUG_BUILD &&
            utils_1.logger.warn('Misconfigured SDK. Vue specific errors will not be captured.\n' +
                'Update your `Sentry.init` call with an appropriate config option:\n' +
                '`app` (Application Instance - Vue 3) or `Vue` (Vue Constructor - Vue 2).');
        return;
    }
    if (options.app) {
        var apps = Array.isArray(options.app) ? options.app : [options.app];
        apps.forEach(function (app) { return vueInit(app, options); });
    }
    else if (options.Vue) {
        vueInit(options.Vue, options);
    }
}
exports.init = init;
var vueInit = function (app, options) {
    errorhandler_1.attachErrorHandler(app, options);
    if ('tracesSampleRate' in options || 'tracesSampler' in options) {
        app.mixin(tracing_1.createTracingMixins(tslib_1.__assign(tslib_1.__assign({}, options), options.tracingOptions)));
    }
};
//# sourceMappingURL=sdk.js.map