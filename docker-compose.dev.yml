# This is a Docker Compose development environment for Restarters.  It allows you to run a development environment
# locally.  You'll get:
# - a web server on http://www.example.com:8001 which serves up restarters.  Admin user is jane@bloggs.net/passw0rd.
# - phpMyAdmin on http://www.example.com:8002.  Use host restarters_db, user root/s3cr3t
# - Discourse on http://www.example.com:8003.  User is someuser/mustbetencharacters; see below about hostname.
# - Mailhog on http://localhost:8025.
#
# TODO The domain name could be better but needs some configuration on the Discourse images which is hard.
# TODO It doesn't yet include the wiki.
# TODO If your host is Linux, this probably only works if you run as root.
# TODO This is stock Discourse - no theme.  Would be nice to have the theme, but that doesn't matter so far as
# testing the integration.
#
# On the machine where you will be using your browser to access the Restarters / Discourse sites once set up on Docker,
# add a record to your hosts file to point the domain www.example.com to the machine.
#
# Then start using:
# - docker-compose up -d
#
# The Restarters web server won't be available for some time after that finishes - it will be doing a composer
# install, artisan migrate etc. Discourse also takes quite a few minutes to finish initialising.  You can monitor
# progress using:
#
# docker logs --follow restarters
#
# (or via Docker Desktop's UI on Windows).   Check for any obvious errors.
#
# Then:
# - edit .env and set GOOGLE_API_CONSOLE_KEY to the dev key.
# TODO This isn't checked in to the codebase, but once this works on Circle then we can put it in an env variable and edit it in via docker_run.sh.
# - log in to the restarters container using: docker exec -it restarters bash
# - run UT using: export DB_TEST_HOST=restarters_db; php vendor/phpunit/phpunit/phpunit --configuration ./phpunit.xml
# TODO This isn't a very convenient way to do run tests.  Would be good to enable SSH on the Restarter container so
# that JetBrains and other IDEs can trigger the running of tests.
#
# If you want to remove everything to free up disk space or force a complete rebuild (e.g. as a sanity check
# after changing this configuration):
# - docker-compose down -v --rmi all --remove-orphans
#
# Discourse will be set up with an API key of 9fd72d4c45226cbf7a540af3cb49ee2e2da034b1984881b13743a3f2e071be29.  If
# you need to recreate this, then:
# - Log in to http://www.example.com:8003 using someuser/mustbetencharacters
# - Go to http://www.example.com:8003/admin/api/keys/new and create an API key for all users with all scope.
# Then put it in .env as DISCOURSE_APIKEY.
# - Go to http://www.example.com:8003/admin/site_settings/category/login?filter= and
#   - set the discourse connect url to http://www.example.com:8001/discourse/sso
#   - enable discourse connect
#   - enable discourse connect provider
#   - set the discourse connect secret to mustbetencharacters (should match DISCOURSE_SECRET in .env).
# This is automated in a different way in CircleCI - see config.yml.

version: '3'
services:
  restarters:
    environment:
      MAIL_HOST: restarters_mailhog
      MAIL_PORT: 1025

  phpmyadmin:
    depends_on:
      - restarters_db
    image: phpmyadmin
    container_name: restarters_phpmyadmin
    restart: unless-stopped
    ports:
      - 8002:80
    environment:
      - PMA_ARBITRARY=1
      - PMA_HOST=restarters_db
#      - PMA_USER=root
#      - PMA_PASSWORD=s3cr3t
    networks:
      - app-network
  mailhog:
    image: mailhog/mailhog
    container_name: restarters_mailhog
    logging:
      driver: 'none'  # disable saving logs
    ports:
      - 1025:1025 # smtp server
      - 8025:8025 # web ui
    networks:
      - app-network