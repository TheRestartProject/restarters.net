version: 2

dependencies:
  pre:
    - curl -L -o google-chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
    - sudo dpkg -i google-chrome.deb
    - sudo sed -i 's|HERE/chrome\"|HERE/chrome\" --disable-setuid-sandbox|g' /opt/google/chrome/google-chrome
    - rm google-chrome.deb
jobs:
  build:
    docker:
      - image: cimg/php:8.1.12-node
        name: restarters.test
        environment:
          - DB_CONNECTION: mysql
          - DB_HOST: 127.0.0.1
          - DB_PORT: 3306
          - DB_DATABASE: restarters_db
          - DB_USERNAME: restarters
          - DB_PASSWORD: s3cr3t
          - TZ: "UTC"
      - image: cimg/mysql:5.7.36
        environment:
          # You can connect once ssh'd in using  mysql -u root -p -h 127.0.0.1
          - MYSQL_ROOT_PASSWORD: s3cr3t
          - MYSQL_DATABASE: restarters_db
          - MYSQL_USER: restarters
          - MYSQL_PASSWORD: s3cr3t
      - image: mcr.microsoft.com/playwright:focal
        environment:
          NODE_ENV: development
          TZ: "UTC"
      - image: 'bitnami/mariadb:latest'
        name: mariadb
        environment:
          - ALLOW_EMPTY_PASSWORD=yes
          - MARIADB_USER=bn_mediawiki
          - MARIADB_DATABASE=bitnami_mediawiki
      - image: 'bitnami/mediawiki:1'
        name: mediawiki
        labels:
          kompose.service.type: nodeport
        environment:
          - MARIADB_HOST=mariadb
          - MARIADB_PORT_NUMBER=3306
          - MEDIAWIKI_DATABASE_USER=bn_mediawiki
          - MEDIAWIKI_DATABASE_NAME=bitnami_mediawiki
          - ALLOW_EMPTY_PASSWORD=yes
          - MEDIAWIKI_EXTERNAL_HTTP_PORT_NUMBER=8080
          - MEDIAWIKI_HOST=mediawiki
          - TZ: "UTC"
        depends_on:
          - mariadb
      - image: 'docker.io/bitnami/postgresql:11'
        name: postgresql
# No volumes on CircleCI
#        volumes:
#          - 'postgresql_data:/bitnami/postgresql'
        environment:
          - ALLOW_EMPTY_PASSWORD=yes
          - POSTGRESQL_USERNAME=bn_discourse
          - POSTGRESQL_DATABASE=bitnami_discourse
# No networks on CircleCI
#    networks:
#      - app-network

      - image: docker.io/bitnami/redis:6.0
        name: restarters_discourse_redis
        environment:
          - ALLOW_EMPTY_PASSWORD=yes
#        volumes:
#          - 'redis_data:/bitnami/discourse'
#        networks:
#          - app-network

      - image: docker.io/bitnami/discourse:2
        name: restarters_discourse
# No ports on CircleCI
#        ports:
#          - '8003:80'
#        volumes:
#          - 'discourse_data:/bitnami/discourse'
        depends_on:
          - postgresql
          - restarters_discourse_redis
        environment:
          - ALLOW_EMPTY_PASSWORD=yes
          - DISCOURSE_USERNAME=someuser
          - DISCOURSE_PASSWORD=mustbetencharacters
          - DISCOURSE_HOST=www.example.com:8003
          - DISCOURSE_PORT_NUMBER=80
          - DISCOURSE_DATABASE_HOST=postgresql
          - DISCOURSE_DATABASE_PORT_NUMBER=5432
          - DISCOURSE_DATABASE_USER=bn_discourse
          - DISCOURSE_DATABASE_NAME=bitnami_discourse
          - DISCOURSE_REDIS_HOST=restarters_discourse_redis
          - DISCOURSE_REDIS_PORT_NUMBER=6379
          - POSTGRESQL_CLIENT_POSTGRES_USER=postgres
          - POSTGRESQL_CLIENT_CREATE_DATABASE_NAME=bitnami_discourse
          - POSTGRESQL_CLIENT_CREATE_DATABASE_EXTENSIONS=hstore,pg_trgm
#    networks:
#      - app-network

      - image: docker.io/bitnami/discourse:2
        name: restarters_discourse_sidekiq
        depends_on:
          - restarters_discourse
#        volumes:
#          - 'sidekiq_data:/bitnami/discourse'
        command: /opt/bitnami/scripts/discourse-sidekiq/run.sh
        environment:
          - ALLOW_EMPTY_PASSWORD=yes
          - DISCOURSE_HOST=www.example.com
          - DISCOURSE_DATABASE_HOST=postgresql
          - DISCOURSE_DATABASE_PORT_NUMBER=5432
          - DISCOURSE_DATABASE_USER=bn_discourse
          - DISCOURSE_DATABASE_NAME=bitnami_discourse
          - DISCOURSE_REDIS_HOST=restarters_discourse_redis
          - DISCOURSE_REDIS_PORT_NUMBER=6379
#        networks:
#          - app-network

    steps:
      - checkout
      - run: sudo apt update
      - run: sudo apt install dnsutils openssl zip unzip git libxml2-dev libzip-dev zlib1g-dev libcurl4-openssl-dev iputils-ping default-mysql-client vim libpng-dev libgmp-dev libjpeg-turbo8-dev
      - run: sudo apt-get install php-xmlrpc php8.1-intl php8.1-xdebug php8.1-mbstring php8.1-simplexml php8.1-curl php8.1-zip postgresql-client php8.1-gd php8.1-xmlrpc
      - run: sudo pecl install xdebug

      # We now need Node 14 for Playwright.
      - run: sudo curl -sL https://deb.nodesource.com/setup_14.x | sudo bash -
      - run: sudo apt update
      - run: sudo apt -y install nodejs
      - run: sudo rm /usr/local/bin/node

      - run: cp .env.example .env

      # Need access to timezones.
      - run: mysql --host="127.0.0.1" -u root -ps3cr3t -e "GRANT SELECT ON mysql.time_zone_name TO 'restarters'@'%';"

      # We have Discourse on CircleCI.  Create Discourse API key.  We do this hackily in the DB because the Bitnami image
      # doesn't expose an easy way to do it.
      - run: sed -i 's/FEATURE__DISCOURSE_INTEGRATION=.*$/FEATURE__DISCOURSE_INTEGRATION=true/g' .env
      - run: sed -i 's/DISCOURSE_URL=.*$/DISCOURSE_URL=http:\/\/restarters_discourse/g' .env
      - run: sed -i 's/DISCOURSE_APIKEY=.*$/DISCOURSE_APIKEY=fb71f38ca2b8b7cd6a041e57fd8202c9937088f0ecae7db40722bd758dda92fc/g' .env
      - run: sed -i 's/DISCOURSE_APIUSER=.*$/DISCOURSE_APIUSER=someuser/g' .env

      # ...and Mediawiki.
      - run: sed -i 's/FEATURE__WIKI_INTEGRATION=.*$/FEATURE__WIKI_INTEGRATION=true/g' .env
      - run: sed -i 's/WIKI_URL=.*$/WIKI_URL=http:\/\/mediawiki:8080/g' .env
      - run: sed -i 's/WIKI_DB=.*$/WIKI_DB=bitnami_mediawiki/g' .env
      - run: sed -i 's/WIKI_USER=.*$/WIKI_USER=user/g' .env
      - run: sed -i 's/WIKI_PASSWORD=.*$/WIKI_PASSWORD=bitnami123/g' .env
      - run: sed -i 's/WIKI_APIUSER=.*$/WIKI_APIUSER=user/g' .env
      - run: sed -i 's/WIKI_APIPASSWORD=.*$/WIKI_APIPASSWORD=bitnami123/g' .env

      # Playwright needs the debug bar not to appear
      - run: sed -i 's/APP_DEBUG=.*$/APP_DEBUG=FALSE/g' .env

      # ...and runs on localhost.
      - run: sed -i 's/SESSION_DOMAIN=.*$/SESSION_DOMAIN=localhost/g' .env

      # ...and needs honeypot rate-limiting needs to be turned off.
      - run: sed -i 's/HONEYPOT_DISABLE=.*$/HONEYPOT_DISABLE=TRUE/g' .env

      - run: wget https://getcomposer.org/composer-2.phar -O composer.phar; rm -rf vendor; echo Y | php8.1 composer.phar install
      - run: npm install
      - run: npx playwright install
      - run: npx playwright install-deps
      - run: npm install -D @playwright/test

      - run: php artisan key:generate
      - run: php artisan migrate

      - run: wget -O phpunit https://phar.phpunit.de/phpunit-9.phar ; chmod +x phpunit

      # The phpunit and playwright tests require an uploads directory in a slightly different place.  Not really
      # worth fixing.
      - run: mkdir uploads
      - run: mkdir public/uploads

      # Wait for Discourse to finish initialising.
      - run: while ! nc -z restarters_discourse 80; do sleep 1 ; done
      - run: psql -h postgresql -U postgres -c "INSERT INTO api_keys (id, user_id, created_by_id, created_at, updated_at, allowed_ips, hidden, last_used_at, revoked_at, description, key_hash, truncated_key) VALUES (1, NULL, 1, '2021-10-25 13:56:20.033338', '2021-10-25 13:56:20.033338', NULL, false, NULL, NULL, 'Restarters', 'd89e9dfacfb611fbaf004807648187ce7ed474df44dcb0ada230fab5c8dd6a5b', '9fd7');" bitnami_discourse

      # Run phpunit.  Discourse makes things slow, so up the timeout.
      - run:
           command: export XDEBUG_MODE=coverage;./phpunit -d memory_limit=1024M --bootstrap vendor/autoload.php --coverage-clover tests/clover.xml --configuration ./phpunit.xml
           no_output_timeout: 45m

      # Coveralls is pernickety about the location it uploads from existing.
      - run: mkdir build; mkdir build/logs; php vendor/bin/php-coveralls -v -x tests/clover.xml

      # Run the Playwright tests.
      #
      # Zap groups set up by the UT; this can confuse Playwright tests.
      - run: mysql --host="127.0.0.1" -u root -ps3cr3t -e "use restarters_db;SET foreign_key_checks=0;DELETE FROM groups WHERE location IS NULL;SET foreign_key_checks=1;"
      # Ignore the return code from the tinker; the user might exist from the phpunit tests.  If it doesn't and
      # the create fails, the tests will fail too.
      - run: echo "App\User::create(['name'=>'Jane Bloggs','email'=>'jane@bloggs.net','password'=>Hash::make('passw0rd'),'role'=>2,'consent_past_data'=>'2021-01-01','consent_future_data'=>'2021-01-01','consent_gdpr'=>'2021-01-01']);" | php artisan tinker || true
      # Build the web app.
      - run: export NODE_OPTIONS=--max-old-space-size=8192;  npm rebuild node-sass; npm run prod
      - run: npx playwright install
      # Set up a real nginx/fpm server.  This improves the speed of the tests enormously as artisan serve uses the
      # single-threaded php built-in web server.
      - run: sudo apt-get install nginx php8.1-fpm php8.1-mysql php8.1-pdo
      - run: sudo cp /home/circleci/project/.circleci/nginx.conf /etc/nginx/sites-available/default
      - run: sudo chmod 777 /var/run/php/php8.1-fpm.sock
      - run: sudo sed -i 's/www-data/circleci/g' /etc/php/8.1/fpm/pool.d/www.conf
      - run: sudo /etc/init.d/php8.1-fpm start
      - run: sudo sed -i 's/user .*;/user circleci;/g' /etc/nginx/nginx.conf
      - run: sudo /etc/init.d/nginx start
      # We're running against localhost.
      - run: sudo sed -i 's/APP_URL=.*$/APP_URL=http:\/\/localhost/g' /home/circleci/project/.env
      # Fix up Google key from CircleCI config.
      - run: cp .env /tmp/.env
      - run: echo "" >> /tmp/.env
      - run: echo GOOGLE_API_CONSOLE_KEY=$GOOGLE_API_CONSOLE_KEY >> /tmp/.env
      - run: sudo cp /tmp/.env /home/circleci/project/.env
      - run: sudo chown -R www-data:www-data /home/circleci/project

      # Now run the tests.
      - run:
          name: Playwright Tests
          no_output_timeout: 10m
          command: npx playwright test --reporter=list


