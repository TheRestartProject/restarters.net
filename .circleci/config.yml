version: 2

dependencies:
  pre:
    - curl -L -o google-chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
    - sudo dpkg -i google-chrome.deb
    - sudo sed -i 's|HERE/chrome\"|HERE/chrome\" --disable-setuid-sandbox|g' /opt/google/chrome/google-chrome
    - rm google-chrome.deb
jobs:
  build:
    docker:
      - image: cimg/php:7.4.11-node
        name: restarters.test
        environment:
          - DB_CONNECTION: mysql
          - DB_HOST: 127.0.0.1
          - DB_PORT: 3306
          - DB_DATABASE: restarters_db
          - DB_USERNAME: restarters
          - DB_PASSWORD: s3cr3t
          - TZ: "UTC"
      - image: circleci/mysql:5.7.33
        environment:
          # You can connect once ssh'd in using  mysql -u root -p -h 127.0.0.1
          - MYSQL_ROOT_PASSWORD: s3cr3t
          - MYSQL_DATABASE: restarters_db
          - MYSQL_USER: restarters
          - MYSQL_PASSWORD: s3cr3t
      - image: mcr.microsoft.com/playwright:focal
        environment:
          NODE_ENV: development
          TZ: "UTC"
      - image: 'bitnami/mariadb:latest'
        name: mariadb
        environment:
          - ALLOW_EMPTY_PASSWORD=yes
          - MARIADB_USER=bn_mediawiki
          - MARIADB_DATABASE=bitnami_mediawiki
      - image: 'bitnami/mediawiki:1'
        name: mediawiki
        labels:
          kompose.service.type: nodeport
        environment:
          - MARIADB_HOST=mariadb
          - MARIADB_PORT_NUMBER=3306
          - MEDIAWIKI_DATABASE_USER=bn_mediawiki
          - MEDIAWIKI_DATABASE_NAME=bitnami_mediawiki
          - ALLOW_EMPTY_PASSWORD=yes
          - MEDIAWIKI_EXTERNAL_HTTP_PORT_NUMBER=8080
          - MEDIAWIKI_HOST=mediawiki
          - TZ: "UTC"
        depends_on:
          - mariadb
      - image: 'docker.io/bitnami/postgresql:11'
        name: postgresql
# No volumes on CircleCI
#        volumes:
#          - 'postgresql_data:/bitnami/postgresql'
        environment:
          - ALLOW_EMPTY_PASSWORD=yes
          - POSTGRESQL_USERNAME=bn_discourse
          - POSTGRESQL_DATABASE=bitnami_discourse
# No networks on CircleCI
#    networks:
#      - app-network

      - image: docker.io/bitnami/redis:6.0
        name: restarters_discourse_redis
        environment:
          - ALLOW_EMPTY_PASSWORD=yes
#        volumes:
#          - 'redis_data:/bitnami/discourse'
#        networks:
#          - app-network

      - image: docker.io/bitnami/discourse:2
        name: restarters_discourse
# No ports on CircleCI
#        ports:
#          - '8003:80'
#        volumes:
#          - 'discourse_data:/bitnami/discourse'
        depends_on:
          - postgresql
          - restarters_discourse_redis
        environment:
          - ALLOW_EMPTY_PASSWORD=yes
          - DISCOURSE_USERNAME=someuser
          - DISCOURSE_PASSWORD=mustbetencharacters
          - DISCOURSE_HOST=www.example.com:8003 # You should have set this in hosts.
          - DISCOURSE_PORT_NUMBER=80
          - DISCOURSE_DATABASE_HOST=postgresql
          - DISCOURSE_DATABASE_PORT_NUMBER=5432
          - DISCOURSE_DATABASE_USER=bn_discourse
          - DISCOURSE_DATABASE_NAME=bitnami_discourse
          - DISCOURSE_REDIS_HOST=restarters_discourse_redis
          - DISCOURSE_REDIS_PORT_NUMBER=6379
          - POSTGRESQL_CLIENT_POSTGRES_USER=postgres
          - POSTGRESQL_CLIENT_CREATE_DATABASE_NAME=bitnami_discourse
          - POSTGRESQL_CLIENT_CREATE_DATABASE_EXTENSIONS=hstore,pg_trgm
#    networks:
#      - app-network

      - image: docker.io/bitnami/discourse:2
        name: restarters_discourse_sidekiq
        depends_on:
          - restarters_discourse
#        volumes:
#          - 'sidekiq_data:/bitnami/discourse'
        command: /opt/bitnami/scripts/discourse-sidekiq/run.sh
        environment:
          - ALLOW_EMPTY_PASSWORD=yes
          - DISCOURSE_HOST=www.example.com
          - DISCOURSE_DATABASE_HOST=postgresql
          - DISCOURSE_DATABASE_PORT_NUMBER=5432
          - DISCOURSE_DATABASE_USER=bn_discourse
          - DISCOURSE_DATABASE_NAME=bitnami_discourse
          - DISCOURSE_REDIS_HOST=restarters_discourse_redis
          - DISCOURSE_REDIS_PORT_NUMBER=6379
#        networks:
#          - app-network

    steps:
      - add_ssh_keys:
            fingerprints:
               - "70:72:0f:cc:85:bc:c4:05:56:55:eb:26:26:5a:0f:75"
      - checkout
      - run: sudo apt update
      - run: sudo apt install openssl zip unzip git libxml2-dev libzip-dev zlib1g-dev libcurl4-openssl-dev iputils-ping default-mysql-client vim libpng-dev libgmp-dev libjpeg-turbo8-dev
      - run: sudo apt-get install php7.4-xmlrpc php7.4-intl php7.4-xdebug php7.4-xmlrpc php7.4-mbstring php7.4-simplexml php7.4-curl php7.4-zip python
      - run: cp .env.example .env

      # We have Discourse on CircleCI.
      - run: sed -i 's/FEATURE__DISCOURSE_INTEGRATION=.*$/FEATURE__DISCOURSE_INTEGRATION=true/g' .env
      - run: sed -i 's/DISCOURSE_URL=.*$/DISCOURSE_URL=http:\/\/www.example.com/g' .env
#        - DISCOURSE_SECRET="ASDF"
#          DISCOURSE_APIUSER=someuser
#          DISCOURSE_APIKEY=1234

      # ...and Mediawiki.
      - run: sed -i 's/FEATURE__WIKI_INTEGRATION=.*$/FEATURE__WIKI_INTEGRATION=true/g' .env
      - run: sed -i 's/WIKI_URL=.*$/WIKI_URL=http:\/\/mediawiki:8080/g' .env
      - run: sed -i 's/WIKI_DB=.*$/WIKI_DB=bitnami_mediawiki/g' .env
      - run: sed -i 's/WIKI_USER=.*$/WIKI_USER=user/g' .env
      - run: sed -i 's/WIKI_PASSWORD=.*$/WIKI_PASSWORD=bitnami123/g' .env
      - run: sed -i 's/WIKI_APIUSER=.*$/WIKI_APIUSER=user/g' .env
      - run: sed -i 's/WIKI_APIPASSWORD=.*$/WIKI_APIPASSWORD=bitnami123/g' .env

      # Playwright needs the debug bar not to appear
      - run: sed -i 's/APP_DEBUG=.*$/APP_DEBUG=FALSE/g' .env

      # ...and runs on localhost.
      - run: sed -i 's/SESSION_DOMAIN=.*$/SESSION_DOMAIN=localhost/g' .env

      # ...and needs honeypot rate-limiting needs to be turned off.
      - run: sed -i 's/HONEYPOT_DISABLE=.*$/HONEYPOT_DISABLE=TRUE/g' .env

      - run: wget https://getcomposer.org/composer-1.phar; rm -rf vendor; php7.4 composer-1.phar install
      - run: npm install
      - run: npx playwright install
      - run: npx playwright install-deps
      - run: npm install -D @playwright/test

      - run: php artisan key:generate
      - run: php artisan migrate

      - run: wget -O phpunit https://phar.phpunit.de/phpunit-7.phar ; chmod +x phpunit
      - run: mkdir uploads

      - run: export XDEBUG_MODE=coverage;./phpunit -d memory_limit=512M --bootstrap vendor/autoload.php -dxdebug.coverage_enable=1 --coverage-clover tests/clover.xml --configuration ./phpunit.xml

      # Coveralls is pernickety about the location it uploads from existing.
      - run: mkdir build; mkdir build/logs; php vendor/bin/php-coveralls -v -x tests/clover.xml

      # Run the Playwright tests.
      # Ignore the return code from the tinker; the user might exist from the phpunit tests.  If it doesn't and
      # the create fails, the tests will fail too.
      - run: echo "App\User::create(['name'=>'Jane Bloggs','email'=>'jane@bloggs.net','password'=>Hash::make('passw0rd'),'role'=>2,'consent_past_data'=>'2021-01-01','consent_future_data'=>'2021-01-01','consent_gdpr'=>'2021-01-01']);" | php artisan tinker || true
      - run: export NODE_OPTIONS=--max-old-space-size=8192;  npm rebuild node-sass; npm run prod
      - run: npx playwright install
      - run: npx playwright test
